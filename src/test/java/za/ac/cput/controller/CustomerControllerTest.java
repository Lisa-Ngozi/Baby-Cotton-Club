package za.ac.cput.controller;

import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.*;
import za.ac.cput.domain.Customer;
import za.ac.cput.factory.CustomerFactory;

import java.util.ArrayList;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@TestMethodOrder(MethodOrderer.MethodName.class)
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class CustomerControllerTest {

    private Customer customer;

    @LocalServerPort
    private int port;

    @Autowired
    private TestRestTemplate restTemplate;

    private String getBaseUrl() {
        return "http://localhost:" + port + "/api/customer";
    }

    @BeforeAll
    void setUp() {
        customer = CustomerFactory.createCustomer(
                "John",
                "Doe",
                "mengezi@gmail.com",
                "0781234567",
                null,
                null,
                null

        );

        String url = getBaseUrl() + "/create";
        ResponseEntity<Customer> response = restTemplate.postForEntity(url, customer, Customer.class);

        System.out.println("POST Response body: " + response.getBody());
        System.out.println("POST status: " + response.getStatusCode());

        assertEquals(HttpStatus.OK, response.getStatusCode(), "Failed to create customer");
        customer = response.getBody();
        assertNotNull(customer, "Customer response is null");
        assertNotNull(customer.getCustomerId(), "Customer ID should be generated by DB");
    }


    @Test
    void a_create() {
        assertNotNull(customer);
        System.out.println("Created Customer: " + customer);
    }
//
//    @Test
//    void b_read() {
//        String url = getBaseUrl() + "/read/" + customer.getCustomerId();
//        ResponseEntity<Customer> response = restTemplate.getForEntity(url, Customer.class);
//
//        assertEquals(HttpStatus.OK, response.getStatusCode());
//        assertNotNull(response.getBody());
//        assertEquals(customer.getCustomerId(), response.getBody().getCustomerId());
//        System.out.println("Read Customer: " + response.getBody());
//    }

    @Test
    void c_update() {
        Customer updatedCustomer = new Customer.Builder()
                .copy(customer)
                .setPhoneNumber("0711111111")
                .build();

        HttpEntity<Customer> request = new HttpEntity<>(updatedCustomer);
        String url = getBaseUrl() + "/update";
        ResponseEntity<Customer> response = restTemplate.exchange(url, HttpMethod.PUT, request, Customer.class);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertEquals("0711111111", response.getBody().getPhoneNumber());

        customer = response.getBody(); // refresh local reference
        System.out.println("Updated Customer: " + customer);
    }

    @Test
    void d_findAll() {
        String url = getBaseUrl() + "/findAll";
        ResponseEntity<Customer[]> response = restTemplate.getForEntity(url, Customer[].class);

        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertNotNull(response.getBody());
        assertTrue(response.getBody().length > 0, "Expected at least one customer");
        System.out.println("All Customers: " + response.getBody().length);
    }
}
